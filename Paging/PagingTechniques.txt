#include<stdio.h>
#include<stdlib.h>
#include<string.h>

typedef struct mynode
{
	char id[2];
	int array[10];
	int size;
	struct mynode *next;
}process;
int frame[20][2];

void freedisplay(int size)
{
	printf("Free Frames : ");
	for(int i=0;i<size;i++)
	{
		if(frame[i][1] == 0)
			printf("%d ",frame[i][0]);

	}
	printf("\n");


}

int count(int n)
{
	int c=0;
	for(int i=0;i<n;i++)
	{
		if(frame[i][1] == 0)
			c++;

	}
	return c;

}

void request(process *p,int n)
{
	process *s = p;
	process *temp;
	temp = (struct mynode*)malloc(sizeof(struct mynode));
	printf("Enter the Process requirement(ID Size) : ");
	scanf("%s %d",temp->id,&temp->size);
	if(temp -> size > count(n))
	{
		printf("Insufficient frames\n");
		return;
	}
	else
	{
		int i=0,j=0;
		while(i<=temp -> size-1)
		{
			if(frame[j][1] == 0)
			{
				temp->array[i] = frame[j][0];
				frame[j][1] = 1;
				i++;
				j++;
				
			}
			else
				j++;

		}
		while(s->next != NULL)
			s=s->next;
		temp->next = s->next;
		s->next = temp;
	}
	printf("Process is divided into %d pages\n",temp->size);
	printf("Page Table For %s:\n",temp->id);
	for(int i=0;i<temp->size;i++)
	{
		printf("Page %d : Frame %d\n",i,temp->array[i]);

	}


}

void swap(int si)
{
	for(int i=0;i<si;i++)
	{
		for(int j=i+1;j<si;j++)
		{
			if(frame[i][1] > frame[j][1])
			{
				int temp[1][2];
				temp[0][0] = frame[i][0];
				temp[0][1] = frame[i][1];
				frame[i][0] = frame[j][0];
				frame[i][1] = frame[j][1];
				frame[j][0] = temp[0][0];
				frame[j][1] = temp[0][1];	
			}

		}


	}


}

void deallocate(process *p,int n)
{
	swap(n);
	char id[2];
	printf("Enter the process id to deallocate : ");
	scanf("%s",id);
	process *ss = p;
	while(ss->next!= NULL)
	{
		if(strcmp(ss->next->id,id) == 0)
		{
			for(int i=0;i<ss->next->size;i++)
			{
				for(int j=0;j<n;j++)
				{
					if(ss->next->array[i] == frame[j][0])
					{
						frame[j][1] = 0;
						swap(n);
					}

				}

			}
			ss->next = ss->next->next;
			return;
		}
		ss = ss->next;
	}
	printf("The process not found");

}

void display(process *d)
{
	process *m;
	m=d->next;
	while(m != NULL)
	{
		printf("Page Table For %s:\n",m->id);
		for(int i=0;i<m->size;i++)
		{
			printf("Page %d : Frame %d\n",i,m->array[i]);

		}
		m = m->next;
	}	



}

void main()
{
	process *p;
	p = (struct mynode*)malloc(sizeof(struct mynode));
	printf("Paging Technique\n");
	int pm_size,p_size;
	printf("Enter the physical memory size : ");
	scanf("%d",&pm_size);
	printf("Enter the page size : ");
	scanf("%d",&p_size);
	int n_frames = pm_size/p_size;
	printf("Process is divided into %d frames\n",n_frames);
	int n,i=0;
	printf("Enter the no of free frames : ");
	scanf("%d",&n);
	while(i<=n-1)
	{
		int j;
		scanf("%d",&j);
		if(j<n_frames)
		{
			frame[i][0]=j;
			frame[i][1]=0;
			i++;
		}
		else
		{
			printf("The value is out of frame re enter\n");
		}
		
	}
	freedisplay(n);
	int choice;
	while(1)
	{
		printf("1. Process request\n2. Deallocation\n3. Page Table display for all input process\n4. Free Frame list display\n5. Exit\nEnter Option : ");
		scanf("%d",&choice);
		if(choice == 5)
			exit(0);
		if(choice == 1)
			request(p,n);
		if(choice == 2)
			deallocate(p,n);
		if(choice == 3)
			display(p);
		if(choice == 4)
			freedisplay(n);




	}

}

/*
Output : 

Paging Technique
Enter the physical memory size : 32
Enter the page size : 1
Process is divided into 32 frames
Enter the no of free frames : 9
3 6 9 12 1 2 18 30 25
Free Frames : 3 6 9 12 1 2 18 30 25 
1. Process request
2. Deallocation
3. Page Table display for all input process
4. Free Frame list display
5. Exit
Enter Option : 1
Enter the Process requirement(ID Size) : P1 4
Process is divided into 4 pages
Page Table For P1:
Page 0 : Frame 3
Page 1 : Frame 6
Page 2 : Frame 9
Page 3 : Frame 12
1. Process request
2. Deallocation
3. Page Table display for all input process
4. Free Frame list display
5. Exit
Enter Option : 4
Free Frames : 1 2 18 30 25 
1. Process request
2. Deallocation
3. Page Table display for all input process
4. Free Frame list display
5. Exit
Enter Option : 1
Enter the Process requirement(ID Size) : P2 2
Process is divided into 2 pages
Page Table For P2:
Page 0 : Frame 1
Page 1 : Frame 2
1. Process request
2. Deallocation
3. Page Table display for all input process
4. Free Frame list display
5. Exit
Enter Option : 4
Free Frames : 18 30 25 
1. Process request
2. Deallocation
3. Page Table display for all input process
4. Free Frame list display
5. Exit
Enter Option : 3
Page Table For P1:
Page 0 : Frame 3
Page 1 : Frame 6
Page 2 : Frame 9
Page 3 : Frame 12
Page Table For P2:
Page 0 : Frame 1
Page 1 : Frame 2
1. Process request
2. Deallocation
3. Page Table display for all input process
4. Free Frame list display
5. Exit
Enter Option : 2
Enter the process id to deallocate : P1
1. Process request
2. Deallocation
3. Page Table display for all input process
4. Free Frame list display
5. Exit
Enter Option : 4
Free Frames : 18 30 25 3 6 9 12  
1. Process request
2. Deallocation
3. Page Table display for all input process
4. Free Frame list display
5. Exit
Enter Option : 5

*/
